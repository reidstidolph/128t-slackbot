#!/usr/bin/env node

//
// Controller of the 128T slackbot.
//

const pidfile =  __dirname + "/cache/.pid.json"
const runtime = new Date;
var argv;

try {
	var childProcess = require('child_process').spawn,
		fs = require('fs'),
		path = require('path');
} catch (e) {
    console.log(e);
	process.stdout.write('Could not start: ' + e.code + '\n');
	process.exit(1);
}

if (process.argv[2]) ()=>{
  argv = process.argv[2];
}

const log = fs.openSync('./log/128t-slackbot.log', 'a');
const errorLog = fs.openSync('./log/error.log', 'a');

// function for reading the 128T-Slackbot pid file, and checking to see
// if it is running.
//
var getRunningPid = function (callback) {
	// read the pid file
	fs.readFile(pidfile, {encoding: "utf-8"}, (err, pidFromFile)=> {
		if (err) {
			return callback(err);
		}
		try {
			pidJSON = JSON.parse(pidFromFile);
			var pid = pidJSON.pid;
			var startTime = new Date(pidJSON.startTime);
			// test for existance of a running 128T-Slackbot process
			process.kill(pid, 0);
			// calculate a human readable uptime string
			var uptimeMs = runtime.getTime() - startTime.getTime();
			var uptimeDays = Math.floor((uptimeMs / 86400000));
			var uptimeHours = Math.floor(((uptimeMs - (uptimeDays * 86400000)) / 3600000));
			var uptimeMinutes = Math.floor(((uptimeMs - (uptimeDays * 86400000) - (uptimeHours * 3600000)) / 60000));
			var uptimeSeconds = Math.floor(((uptimeMs - (uptimeDays * 86400000) - (uptimeHours * 3600000) - (uptimeMinutes * 60000)) / 1000));
			var uptimeString = `${uptimeDays} days ${uptimeHours} hours ${uptimeMinutes} minutes ${uptimeSeconds} seconds`;
			callback(null, pid, uptimeString);
		} catch(e) {
			callback(e);
		}
	});
};

switch(process.argv[2]) {
	case 'status':
		getRunningPid((err, pid, uptime)=> {
			if (!err) {
				process.stdout.write('\n128T-Slackbot Running (pid ' + pid.toString() + ')\n');
				process.stdout.write(`Running for: ${uptime}\n`);
				process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
				process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n\n');
			} else {
				process.stdout.write('\n128T-Slackbot is not running\n');
				process.stdout.write('   "./128t-slackbot start" to launch the 128T-Slackbot\n\n');
			}
		});
		break;

	case 'start':
        getRunningPid((err, pid, uptime)=> {
            if (!err) {
                process.stdout.write('\n128T-Slackbot is already started.\n');
                process.stdout.write(`Running for: ${uptime}\n`);
                process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n\n');
            } else {
                process.stdout.write('\nStarting 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n\n');

                // Spawn a new 128T-Slackbot process
            	var slackbotProc = childProcess(__dirname + '/main.js', {
                    env: process.env,
                    detached : true,
                    stdio: [ "ignore", log, errorLog ]
                });

                process.stdout.write('\n128T-Slackbot started (pid ' + slackbotProc.pid + ')\n\n');
                slackbotProc.unref();
            }
        });
		break;

	case 'stop':
		getRunningPid((err, pid, uptime)=> {
			if (!err) {
				process.kill(pid, 'SIGTERM');
				process.stdout.write(`128T-Slackbot ran for: ${uptime}\n`);
				process.stdout.write('Stopping 128T-Slackbot. Goodbye!\n');
			} else {
				process.stdout.write('128T-Slackbot is already stopped.\n');
			}
		});
		break;

	case 'restart':
		getRunningPid((err, pid, uptime)=> {
			if (!err) {
				process.stdout.write('\n128T-Slackbot Running (pid ' + pid.toString() + ')\n');
				process.stdout.write(`128T-Slackbot ran for: ${uptime}\n`);
				process.kill(pid, 'SIGHUP');
				process.stdout.write('Restarting 128T-Slackbot\n');

				// Spawn a new 128T-Slackbot process
                var slackbotProc = childProcess(__dirname + '/main.js', {
                    env: process.env,
                    detached : true,
                    stdio: [ "ignore", log, errorLog ]
                });

                process.stdout.write('\n128T-Slackbot restarted (pid ' + slackbotProc.pid + ')\n\n');
                slackbotProc.unref();
                
			} else {
				process.stdout.write('\n128T-Slackbot could not be restarted, as a running instance could not be found.\n\n');
			}
		});
		break;

	default:
		process.stdout.write('\nWelcome to 128T-Slackbot!\n\n');
		process.stdout.write('Usage: ./128t-slackbot {start|stop|restart|status}\n\n');
		process.stdout.write('\t' + 'start' + '\t\tStart the 128T-Slackbot\n');
		process.stdout.write('\t' + 'stop' + '\t\tStops the 128T-Slackbot\n');
		process.stdout.write('\t' + 'restart' + '\t\tRestarts 128T-Slackbot\n');
		process.stdout.write('\t' + 'status' + '\t\tView status of 128T-Slackbot\n');
		process.stdout.write('\n');
		break;
}