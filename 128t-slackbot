#!/usr/bin/env node

//
// Controller of the 128T slackbot.
//

const pidfile =  __dirname + "/cache/.pid.json"
const runtime = new Date;
var argv;

try {
	var childProcess = require('child_process').spawn;
	var fs = require('fs');
	var path = require('path');
	var version = require('./package.json').version;
} catch (e) {
    console.log(e);
	process.stdout.write('Could not start: ' + e.code + '\n');
	process.exit(1);
}

if (process.argv[2]) ()=>{
  argv = process.argv[2];
}

// open log files
//
const log = fs.openSync('./log/128t-slackbot.log', 'a');
const errorLog = fs.openSync('./log/error.log', 'a');

// function for reading the 128T-Slackbot pid file, and checking to see
// if it is running.
//
var getRunningPid = function (callback) {
	// read the pid file
	fs.readFile(pidfile, {encoding: "utf-8"}, (err, pidFromFile)=> {
		if (err) {
			return callback(err);
		}
		try {
			pidJSON = JSON.parse(pidFromFile);
			var pid = pidJSON.pid;
			var startTime = new Date(pidJSON.startTime);
			var runningVer = pidJSON.version;
			// test for existance of a running 128T-Slackbot process
			process.kill(pid, 0);
			// calculate a human readable uptime string
			var uptime = getUptime(startTime, runtime);
			var uptimeString = `${uptime.d} days ${uptime.h} hours ${uptime.m} minutes ${uptime.s} seconds`;
			callback(null, pid, uptimeString, runningVer);
		} catch(e) {
			callback(e);
		}
	});
};

// function to start the 128T Slackbot child process
var startSlackbot = function() {
	console.log("starting slackbot");
	var slackbotProc = childProcess("node", [__dirname + '/main.js'], {
	    env: process.env,
	    detached : true,
	    stdio: [ "ignore", log, errorLog ]
	});
	slackbotProc.unref();
	return slackbotProc.pid;
}

// function that takes in a couple of date objects, and calculates a difference between them
var getUptime = function(d1, d2) {
	if (d1 instanceof Date && d2 instanceof Date) {
		var currentDate;
		var startDate;
		d1ms = d1.getTime();
		d2ms = d2.getTime();

		if (d1ms > d2ms) {
			currentDate = d1ms;
			startDate = d2ms;
		} else if (d1ms < d2ms) {
			currentDate = d2ms;
			startDate = d1ms;
		} else if (d1ms == d2ms) {
			return {d:0,h:0,m:0,s:0};
		}
		
		uptimeObj = {};
		var uptimeMs = currentDate - startDate;
		uptimeObj.d = Math.floor((uptimeMs / 86400000));
		uptimeObj.h = Math.floor(((uptimeMs - (uptimeObj.d * 86400000)) / 3600000));
		uptimeObj.m = Math.floor(((uptimeMs - (uptimeObj.d * 86400000) - (uptimeObj.h * 3600000)) / 60000));
		uptimeObj.s = Math.floor(((uptimeMs - (uptimeObj.d * 86400000) - (uptimeObj.h * 3600000) - (uptimeObj.m * 60000)) / 1000));
		return uptimeObj;
	}
}

switch(process.argv[2]) {
	case 'status':
		getRunningPid((err, pid, uptime, runningVer)=> {
			if (!err) {
				process.stdout.write(`\n128T-Slackbot is Running (pid: ${pid}, v${runningVer})\n`);
				process.stdout.write(`Running for: ${uptime}\n\n`);
				process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
				process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n\n');
			} else {
				process.stdout.write('\n128T-Slackbot is not running\n');
				process.stdout.write('   "./128t-slackbot start" to launch the 128T-Slackbot\n\n');
			}
		});
	break;

	case 'start':
        getRunningPid((err, pid, uptime, runningVer)=> {
            if (!err) {
                process.stdout.write('\n128T-Slackbot is already started.\n');
                process.stdout.write(`Running for: ${uptime}\n\n`);
                process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n\n');
            } else {
                process.stdout.write('\nStarting 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot stop"     to stop the 128T-Slackbot\n');
                process.stdout.write('   "./128t-slackbot restart"  to restart 128T-Slackbot\n');
                var slackBotPid = startSlackbot();
                process.stdout.write(`\n128T-Slackbot started (pid ${slackBotPid}, v${version})\n\n`);
            }
        });
	break;

	case 'stop':
		getRunningPid((err, pid, uptime, runningVer)=> {
			if (!err) {
				process.kill(pid, 'SIGTERM');
				process.stdout.write(`\n128T-Slackbot ran for: ${uptime}\n\n`);
				process.stdout.write('Stopping 128T-Slackbot. Goodbye!\n\n');
			} else {
				process.stdout.write('128T-Slackbot is already stopped.\n');
			}
		});
	break;

	case 'restart':
		getRunningPid((err, pid, uptime, runningVer)=> {
			if (!err) {
				process.stdout.write(`\n128T-Slackbot is Running (pid: ${pid}, v${runningVer})\n`);
				process.stdout.write(`128T-Slackbot ran for: ${uptime}\n\n`);
				process.kill(pid, 'SIGHUP');
				process.stdout.write('Restarting 128T-Slackbot\n');
				var slackBotPid = startSlackbot();
				process.stdout.write(`\n128T-Slackbot re-started (pid ${slackBotPid}, v${version})\n\n`);
			} else {
				process.stdout.write('\n128T-Slackbot could not be restarted, as a running instance could not be found.\n\n');
			}
		});
	break;

	default:
		process.stdout.write(`\nWelcome to 128T-Slackbot! (v${version})\n\n`);
		process.stdout.write('Usage: ./128t-slackbot {start|stop|restart|status}\n\n');
		process.stdout.write('\t' + 'start' + '\t\tStart the 128T-Slackbot\n');
		process.stdout.write('\t' + 'stop' + '\t\tStops the 128T-Slackbot\n');
		process.stdout.write('\t' + 'restart' + '\t\tRestarts 128T-Slackbot\n');
		process.stdout.write('\t' + 'status' + '\t\tView status of 128T-Slackbot\n');
		process.stdout.write('\n');
	break;
}